Version control is uber important for following key reasons
- Track changes in code with each version
- Make incremental progress
- test incremental progress
- Identify potential pitfalls at each increment.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
- See progress over time
- Test and isolate potential code issues

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
- Flexibility to choosing a right logical point to commit
- Google Docs etc: Automatically saving files could lead to random points of versions which may be hard to trouble shoot.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
- Each is used for a different use case.

How can you use the commands git log and git diff to view the history of files?

- Easy and awesome git log and git diff

How might using version control make you more confident to make changes that could break something?

- since i can always go back to a historical version - using git checkout - I am confident that none of my code is set in stone. I can always go back and isolate failure modes.

Now that you have your workspace set up, what do you want to try using Git for?

- I want to manage versions and make sure I am able to track down versions with Git.